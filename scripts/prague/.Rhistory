# load the packages
# main packs to start with
pcks <- c( "tidyverse", "janitor")
if(sum(as.numeric(!pcks %in% installed.packages())) != 0){
installation <- pcks[!pcks %in% installed.packages()]
for(i in 1:length(installation)) {
install.packages(installation, dependencies = T)
break()}
suppressPackageStartupMessages(
sapply(pcks,require,character.only = T)
)
} else {
suppressPackageStartupMessages(
sapply(pcks,require,character.only = T)
)
}
rm(pcks)
# get working directory and paste directory to save outputs
# in the Knit dropdown menu, select Knit directory, then Current Working Directory.
# dir.create("~/R/microbiome_br/scripts")
# dir.create("~/R/microbiome_br/outputs")
# dir.create("~/R/microbiome_br/data")
work_dir <- getwd()
# get working directory and paste directory to save outputs
# in the Knit dropdown menu, select Knit directory, then Current Working Directory.
# dir.create("~/R/microbiome_br/scripts")
# dir.create("~/R/microbiome_br/outputs")
# dir.create("~/R/microbiome_br/data")
work_dir <- getwd()
work_dir
folder_path <- "../microbiome_br_2/"
data.dir
work_dir
# table final
final.table <- read_delim('MG_FEDERICA_TABLE_FINAL.tab')
euk <- read_delim('../microbiome_br_2/eukaryotes.txt')
euk <- read_delim('../../microbiome_br_2/eukaryotes.txt')
euk <- read_delim('../../../microbiome_br_2/eukaryotes.txt')
euk.clean <- euk %>%
mutate(`#Organism/Name` = str_replace_all(`#Organism/Name`, "\\[|\\]","")) %>%
mutate(Organism = `#Organism/Name`, .after = `#Organism/Name`) %>%
janitor::clean_names(.)
# take a look in the data
euk.clean %>% filter(if_any(everything(), ~str_detect(., "Candida albicans"))) %>% pull(status, organism)
prok <- read_delim('../../../microbiome_br_2/prokaryotes.txt')
prok.clean <- prok %>%
mutate(`#Organism/Name` = str_replace_all(`#Organism/Name`, "\\[|\\]","")) %>%
mutate(Organism = `#Organism/Name`, .after = `#Organism/Name`) %>%
janitor::clean_names(.)
# lets take a look in the databases
prok.clean %>% filter(if_any(everything(), ~str_detect(., "Koribacter versatilis Ellin345"))) %>%
filter(if_any(status, ~str_detect(., "Complete")))
prok %>% filter(if_any(everything(), ~str_detect(., "Candidatus")))
final.table <- read_delim('../../../microbiome_br_2/MG_FEDERICA_TABLE_FINAL.tab')
# it removes any instance of '[' or ']'
table.clean <- final.table %>%
mutate(BEST_TAX = str_replace_all(BEST_TAX, "\\[|\\]","")) %>%
rename('number_organism_name' = 'BEST_TAX') %>%
mutate(organism = number_organism_name, .after = number_organism_name) %>%
clean_names()
table.clean %>% select(number_organism_name) %>% filter(if_any(everything(), ~str_detect(., "Candidatus")))
table.clean %>% distinct(number_organism_name)
# get the taxonomies freom Federica table
taxonomies_federica <- table.clean %>% filter(number_organism_name != "-") %>% pull(number_organism_name) %>% as.factor() %>% levels()
rm(euk,prok)
folder_path <- "../../../microbiome_br_2/"
best_tax_prok <- read_delim(file = paste0(folder_path, "federica_found_taxonomy_prok.txt"))
## Read hits found. Avoid running all steps again.
# best_tax_euk <- read_delim(file = paste0(folder_path, "federica_found_taxonomy_euk.txt"))
best_tax_euk <- read_delim(file = paste0(folder_path, "federica_found_taxonomy_euk.txt"))
rm(list=setdiff(ls(), c("taxonomies_federica", "best_tax_prok", "best_tax_euk", 'table.clean')))
number_of_entries_prok <- best_tax_prok %>% count(taxonomy, sort = T )
## The function
source(file = "scripts/prague/alternative_function.R")
getwd
getwd()
## The function
source(file = "alternative_function.R")
genomic_traits(taxa, best_tax_prok)
## Testing function
taxa = "Acetobacter pasteurianus IFO 3283-01"
genomic_traits(taxa, best_tax_prok)
# # See the taxa with the most entries
# number_of_entries
number_of_entries_euk <- best_tax_euk %>% count(taxonomy, sort = T )
# Testing function
genomic_traits("Aaosphaeria arxii", best_tax_euk)
dim(number_of_entries_prok)
full_dataset_prok <- number_of_entries_prok$taxonomy %>% map_df(., genomic_traits, best_tax_prok)
full_dataset_prok
# Store prok hits found
write.table(x = full_dataset_prok, file = paste0(folder_path, "/federica_full_prok.txt"), quote = F, sep = "\t", row.names = F)
folder_path
best_tax_euk <- read_delim(file = paste0(folder_path, "federica_found_taxonomy_euk.txt"))
folder_path <- "../../../microbiome_br_2/"
# Store prok hits found
write.table(x = full_dataset_prok, file = paste0(folder_path, "/federica_full_prok.txt"), quote = F, sep = "\t", row.names = F)
full_dataset_euk <- number_of_entries_euk$taxonomy %>%
map_df(., genomic_traits, best_tax_euk)
# Store euk hits found
write.table(x = full_dataset_euk, file = paste0(folder_path, "/federica_full_euk.txt"), quote = F, sep = "\t", row.names = F)
dim(table.clean)
full_dataset <- bind_rows(full_dataset_prok, full_dataset_prok)
dim(full_dataset)
dim(full_dataset_euk)
dim(full_dataset_prok)
full_dataset_euk
full_dataset_prok
names(full_dataset_prok)
names(full_dataset_euk)
full_dataset_euk$gc_percent_n_as
full_dataset_euk$gc_percent_max
full_dataset_euk$gc_percent_mean
full_dataset_euk$gc_percent_median
# only prokaryotes
full_dataset_prok2 <- table.clean %>%
filter(organism %in% best_tax_prok$taxonomy) %>%
bind_cols(map_df(.$organism, ~genomic_traits(., best_tax_prok)))
full_dataset_prok
# Testing function
genomic_traits("Aaosphaeria arxii", best_tax_euk)
full_dataset_prok
full_dataset_euk
full_dataset <- bind_rows(full_dataset_prok, full_dataset_euk[,-c("gc_percent_n_as")])
full_dataset <- bind_rows(full_dataset_prok, full_dataset_euk[,-"gc_percent_n_as"])
full_dataset_euk[,-"gc_percent_n_as"]
full_dataset <- full_dataset_euk %>%
select(-gc_percent_n_as) %>%
bind_rows(full_dataset_prok)
full_dataset
dim(full_dataset)
dim(full_dataset_prok)
full_dataset_euk %>% select(-gc_percent_n_as) %>% dim()
sum(1166, 782)
match(full_dataset$Taxonomy_from_dataset, table.clean$organism)
match(full_dataset$Taxonomy_from_dataset[1], table.clean$organism)
full_dataset$Taxonomy_from_dataset[1]
table.clean$organism[12249]
match(full_dataset$Taxonomy_from_dataset[1:2], table.clean$organism)
table.clean$organism[c(12249, 83673)]
match(table.clean$organism[1:2], full_dataset$Taxonomy_from_dataset)
table.clean$organism[1:2]
match(table.clean$organism[1:2], full_dataset$Taxonomy)
full_dataset[1460,]
full_dataset_prok2
best_tax_prok$number_organism_name
prok %>% filter(if_any(everything(), ~str_detect(., "Candidatus")))
prok <- read_delim('../../../microbiome_br_2/prokaryotes.txt')
prok %>% filter(if_any(everything(), ~str_detect(., "Candidatus")))
best_tax_prok
best_tax_prok %>% filter(if_any(everything(), ~str_detect(., 'Candidatus')))
waldo::compare(best_tax_prok$number_organism_name, best_tax_prok$taxonomy)
best_tax_prok
best_tax_prok %>% filter(if_any(everything(), ~str_detect(., 'Candidatus')))
Check_names <- best_tax_prok %>% filter(if_any(everything(), ~str_detect(., 'Candidatus')))
Check_names$taxonomy
number_of_entries_prok
number_of_entries_prok %>% filter(if_any(everything(), ~str_detect(., 'bacterium S5')))
number_of_entries_prok
Check_names$taxonomy
Check_names
which(best_tax_prok$number_organism_name != best_tax_prok$taxonomy)
best_tax_prok[which(best_tax_prok$number_organism_name != best_tax_prok$taxonomy), c(1,6)]
waldo::compare(best_tax_prok$number_organism_name, best_tax_prok$taxonomy)
?clean_names
match(table.clean$organism[1:2], full_dataset$Taxonomy)
table.clean$organism[1:2]
full_dataset$Taxonomy[1460]
matched_Federica_table_to_full_dataset <- match(table.clean$organism, full_dataset$Taxonomy)
matched_Federica_table_to_full_dataset[1:50]
c("NA",1,2,3,"NA","NA")
c(NA,1,2,3,NA,NA)
test_vec <- c(NA,1,2,3,NA,NA)
rep(x = NA, 15)
create_fill_table <- function(matched_info){
if(is.na(matched_info)){
c(rep(x = NA, 15))
}
full_dataset[matched_info,]
}
create_fill_table(test_vec)
full_dataset[1,]
full_dataset[c(1,2,3),]
full_dataset[c(1,2,3,1),]
create_fill_table(test_vec)
test_vec <- c(NA,1,2,3,NA,NA,1)
create_fill_table(test_vec)
test_vec <- c(NA,1,2,3,NA,NA,3)
create_fill_table(test_vec)
dim(full_dataset)
names(full_dataset)
which(is.na(test_vec))
create_fill_table <- function(matched_info){
if(is.na(matched_info)){
c(table.clean$organism[which(is.na(matched_info))],rep(x = NA, 15))
}
full_dataset[matched_info,]
}
create_fill_table(test_vec)
create_fill_table <- function(matched_info){
if(is.na(matched_info)){
NA
}
full_dataset[matched_info,]
}
create_fill_table(test_vec)
full_dataset[test_vec,]
matched_Federica_table_to_full_dataset
filler_for_final_table <- full_dataset[matched_Federica_table_to_full_dataset,]
filler_for_final_table
table.clean[1:3]
table.clean[1:3,]
table.clean[1:3,c("tax_img","number_organism_name","organism")]
best_tax_euk
number_of_entries_euk
names(full_dataset)
names(full_dataset)
number_of_entries_prok %>% filter(if_any(everything(), ~str_detect(., 'bacterium S5')))
number_of_entries_prok
best_tax_prok %>% filter(if_any(everything(), ~str_detect(., 'bacterium S5')))
larger_ones_prok
check_NAS_genomic_traits <- function(taxa, df){
Assembly_level <- c("Complete Genome","Chromosome","Scaffold","Contig")
number_of_entries <- df %>% count(taxonomy)
number_of_entries_in_genomic_db <- number_of_entries %>%
filter(taxonomy == taxa) %>%
pull(n)
size_gc_status <- df %>%
filter(taxonomy == taxa) %>%
select(size_mb,gc_percent,status, number_organism_name) %>%
mutate(number_of_entries_in_NCBI = as.numeric(number_of_entries_in_genomic_db))
Higher_status <- Assembly_level[min(match(size_gc_status$status,Assembly_level))]
used_genomes <- size_gc_status %>%
filter(status == Higher_status)
number_of_genomes_after_filter <- nrow(used_genomes)
df_summ_entries <- used_genomes %>%
select(size_mb, gc_percent) %>%
summarize(across(everything(), ~summary(.) %>% as_tibble_row() %>% list())) %>%
unnest(cols = c(size_mb, gc_percent), names_sep = "_") %>%
as_tibble(.name_repair = janitor::make_clean_names) %>%
setNames(str_replace(names(.), "qu", "qtl"))
genome_stats_table <- used_genomes %>%
select(-status) %>%
mutate(df_summ_entries) %>%
mutate(highest_assembly_level = Higher_status, .after = gc_percent ) %>%
mutate(Taxonomy = taxa, .before = size_mb) %>%
mutate(Taxonomy_from_dataset = number_organism_name, .after = Taxonomy, .keep = 'unused') %>%
mutate(number_of_genomes_with_highest_assembly_level = number_of_genomes_after_filter, .before = size_mb_min)
genome_stats_table %>%
slice_max(size_mb)
}
NA_TEST_number_of_entries_prok <- best_tax_prok %>% count(organism, sort = T )
NA_TEST_number_of_entries_prok
check_NAS_genomic_traits <- function(taxa, df){
Assembly_level <- c("Complete Genome","Chromosome","Scaffold","Contig")
number_of_entries <- df %>% count(organism)
number_of_entries_in_genomic_db <- number_of_entries %>%
filter(organism == taxa) %>%
pull(n)
size_gc_status <- df %>%
filter(organism == taxa) %>%
select(size_mb,gc_percent,status, number_organism_name) %>%
mutate(number_of_entries_in_NCBI = as.numeric(number_of_entries_in_genomic_db))
Higher_status <- Assembly_level[min(match(size_gc_status$status,Assembly_level))]
used_genomes <- size_gc_status %>%
filter(status == Higher_status)
number_of_genomes_after_filter <- nrow(used_genomes)
df_summ_entries <- used_genomes %>%
select(size_mb, gc_percent) %>%
summarize(across(everything(), ~summary(.) %>% as_tibble_row() %>% list())) %>%
unnest(cols = c(size_mb, gc_percent), names_sep = "_") %>%
as_tibble(.name_repair = janitor::make_clean_names) %>%
setNames(str_replace(names(.), "qu", "qtl"))
genome_stats_table <- used_genomes %>%
select(-status) %>%
mutate(df_summ_entries) %>%
mutate(highest_assembly_level = Higher_status, .after = gc_percent ) %>%
mutate(Taxonomy = taxa, .before = size_mb) %>%
mutate(Taxonomy_from_dataset = number_organism_name, .after = Taxonomy, .keep = 'unused') %>%
mutate(number_of_genomes_with_highest_assembly_level = number_of_genomes_after_filter, .before = size_mb_min)
genome_stats_table %>%
slice_max(size_mb)
}
TEST_NAS_larger_ones_prok <- number_of_entries_prok %>%
pull(taxonomy)
TEST_NAS_larger_ones_prok
number_of_entries_prok
TEST_NAS_larger_ones_prok
number_of_entries_prok
NA_TEST_number_of_entries_prok
TEST_NAS_larger_ones_prok <- NA_TEST_number_of_entries_prok %>%
pull(organism)
TEST_NAS_prok_taxonomy_search_using_purrr <- TEST_NAS_larger_ones_prok %>% map_df(., genomic_traits, best_tax_prok)
TEST_NAS_prok_taxonomy_search_using_purrr
sum(is.na(filler_for_final_table$Taxonomy))
names(filler_for_final_table)
dim(filler_for_final_table)
dim(table.clean)
Federica_table_with_genomic_traits_info <- bind_cols(table.clean, filler_for_final_table)
write.table(x = Federica_table_with_genomic_traits_info, file = paste0(folder_path, "/FEDERICA_MG_genomic_traits_added.txt"), quote = F, sep = "\t", row.names = F)
getwd()
folder_path <- "../../../microbiome_br_2/"
# load the packages
# main packs to start with
pcks <- c( "tidyverse", "janitor")
if(sum(as.numeric(!pcks %in% installed.packages())) != 0){
installation <- pcks[!pcks %in% installed.packages()]
for(i in 1:length(installation)) {
install.packages(installation, dependencies = T)
break()}
suppressPackageStartupMessages(
sapply(pcks,require,character.only = T)
)
} else {
suppressPackageStartupMessages(
sapply(pcks,require,character.only = T)
)
}
rm(pcks)
euk <- read_delim('../../../microbiome_br_2/eukaryotes.txt')
euk.clean <- euk %>%
mutate(`#Organism/Name` = str_replace_all(`#Organism/Name`, "\\[|\\]","")) %>%
mutate(Organism = `#Organism/Name`, .after = `#Organism/Name`) %>%
janitor::clean_names(.)
# take a look in the data
euk.clean %>% filter(if_any(everything(), ~str_detect(., "Candida albicans"))) %>% pull(status, organism)
prok <- read_delim('../../../microbiome_br_2/prokaryotes.txt')
prok.clean <- prok %>%
mutate(`#Organism/Name` = str_replace_all(`#Organism/Name`, "\\[|\\]","")) %>%
mutate(Organism = `#Organism/Name`, .after = `#Organism/Name`) %>%
janitor::clean_names(.)
# lets take a look in the databases
prok.clean %>% filter(if_any(everything(), ~str_detect(., "Koribacter versatilis Ellin345"))) %>%
filter(if_any(status, ~str_detect(., "Complete")))
prok %>% filter(if_any(everything(), ~str_detect(., "Candidatus")))
final.table <- read_delim('../../../microbiome_br_2/MG_FEDERICA_TABLE_FINAL.tab')
# it removes any instance of '[' or ']'
table.clean <- final.table %>%
mutate(BEST_TAX = str_replace_all(BEST_TAX, "\\[|\\]","")) %>%
rename('number_organism_name' = 'BEST_TAX') %>%
mutate(organism = number_organism_name, .after = number_organism_name) %>%
clean_names()
table.clean %>% select(number_organism_name) %>% filter(if_any(everything(), ~str_detect(., "Candidatus")))
table.clean %>% distinct(number_organism_name)
# get the taxonomies freom Federica table
taxonomies_federica <- table.clean %>% filter(number_organism_name != "-") %>% pull(number_organism_name) %>% as.factor() %>% levels()
taxonomies_federica
best_tax_prok <- read_delim(file = paste0(folder_path, "federica_found_taxonomy_prok.txt"))
best_tax_euk <- read_delim(file = paste0(folder_path, "federica_found_taxonomy_euk.txt"))
best_tax_prok %>% filter(if_any(everything(), ~str_detect(., 'bacterium S5')))
