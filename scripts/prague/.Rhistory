}
for (i in 1:4){
sequences[i] <- cat(sample(actg, 7, replace = T))
}
t1 <- cat(sample(actg, 7, replace = T))
t1
t1 <- c(cat(sample(actg, 7, replace = T)))
t1
t1 <- c(sample(actg, 7, replace = T))
t1
cat(t1)
c(cat(t1))
?cat
t1 <- cat(sample(actg, 6, replace = T), fill = 3)
t1
t1 <- cat(sample(actg, 6, replace = T), fill = 2)
t1 <- cat(sample(actg, 6, replace = T), fill = 2)
t1 <- cat(sample(actg, 6, replace = T), fill = 1)
t1 <- cat(sample(actg, 6, replace = T), fill = 6)
iter <- stats::rpois(1, lambda = 10)
iter
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
paste0("{", 1:10, "}:")
paste0(sample(actg, 7, replace = T))
paste0(cat(sample(actg, 7, replace = T)))
character(paste0(cat(sample(actg, 7, replace = T))))
c(paste0(cat(sample(actg, 7, replace = T))))
t1 <- cat(sample(actg, 6, replace = T), fill = T)
t1
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
paste0(cat(sample(actg, 7, replace = T)))
t1<- paste0(cat(sample(actg, 7, replace = T)))
t1
t1<- c(paste0(cat(sample(actg, 7, replace = T))))
t1
t1[1]<- c(paste0(cat(sample(actg, 7, replace = T))))
t1
?paste0
t1<- paste0(sample(actg, 7, replace = T))
t1
print(t1)
print(t1[1], t1[2])
c(t1[1], t1[2])
paste0(t1[1], t1[2])
for (i in 1:4){
sequences[i] <- sample(actg, 7, replace = T))
}
for (i in 1:4){
sequences[i] <- sample(actg, 7, replace = T)
}
sequences <- c()
for (i in 1:4){
sequences[i] <- sample(actg, 7, replace = T)
}
sequences
for (i in 1:4){
sequences[i] <- c(sample(actg, 7, replace = T))
}
for (i in 1:4){
sequences[i] <- c(sample(actg, 1, replace = T))
}
sequences
for (i in 1:4){
sequences[[i]] <- c(sample(actg, 1, replace = T))
}
sequences
sequences <- list()
for (i in 1:4){
sequences[[i]] <- c(sample(actg, 1, replace = T))
}
sequences
sequences <- c()
7*24
for (i in 1:(7*4){
for (i in 1:(7*4)){
sequences[i] <- c(sample(actg, 1, replace = T))
}
sequences
seq(1, 28, 7)
seq(1, 28, 6)
seq(1, 28, 7)+1
taxa <- c("asco", "basid",  "chtri", "nemat")
temp <- c(sample(10.0, 41.0, 4))
temp
temp <- c(sample(10, 41, 4))
temp
temp <- c(sample(10, 41, 0.1))
temp
temp <- c(sample(stats::rnorm(100, mean = 20, sd = 5), 4))
temp
div.chao <- c(sample(1:100, 5, replace = T))
div.chao
div.chao <- c(sample(1:100, 4, replace = T))
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
remove.packages('rlang')
install.packages("rlang")
install.packages("ggplot2")
library(rlang)
library("rlang")
install.packages("rlang")
install.packages("rlang")
library(devtools)
install.packages("devtools")
install.packages("ggplot2")
otu_table <- read.table(file = "PIME_otu_table_prevalence_70.tsv")
otu_table <- read.table(file = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/NMDS/PIME_otu_table_prevalence_70.tsv")
# colSums(otu_table)
dim(otu_table)
rlt_otu_table <- sweep(otu_table, 2, colSums(otu_table), "/")
otu_table
rlt_otu_table
otu_table
rlt_otu_table$HRB096
otu_table$HRB096
# colSums(otu_table)
dim(otu_table)
colnames(otu_table)
rownames(otu_table)
Important_OTUs <- rownames(otu_table)
# Top 100 from the whole OTU_table filter the full table by the most abundant taxa, over 0.29
a = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/OTU_table_noSingDoubPatMissingEuk.txt"
otu_table = read.delim(file = a, header = T, row.names = 1, stringsAsFactors = F)
# colSums(otu_table)
dim(otu_table)
colSums(otu_table)
otu_table[rownames(otu_table) %in% Important_OTUs,]
colSums(otu_table[rownames(otu_table) %in% Important_OTUs,])
otu_table[rownames(otu_table) %in% Important_OTUs,][order(otu_table[rownames(otu_table) %in% Important_OTUs,])]
order(otu_table[rownames(otu_table) %in% Important_OTUs,])
class(otu_table[rownames(otu_table) %in% Important_OTUs,])
dim(otu_table[rownames(otu_table) %in% Important_OTUs,])
colSums(otu_table[rownames(otu_table) %in% Important_OTUs,])
colSums(otu_table[rownames(otu_table) %in% Important_OTUs,])[order(colSums(otu_table[rownames(otu_table) %in% Important_OTUs,]))]
colSums(otu_table[rownames(otu_table) %in% Important_OTUs,])[order(colSums(otu_table[rownames(otu_table) %in% Important_OTUs,]),decreasing = F)]
colSums(otu_table[rownames(otu_table) %in% Important_OTUs,])[order(colSums(otu_table[rownames(otu_table) %in% Important_OTUs,]),decreasing = T)]
rlt_otu_table <- sweep(otu_table, 2, colSums(otu_table), "/")
t_otutable = as.data.frame(t(rlt_otu_table[,]))
otu_table <- otu_table[rownames(otu_table) %in% Important_OTUs,]
rlt_otu_table <- sweep(otu_table, 2, colSums(otu_table), "/")
t_otutable = as.data.frame(t(rlt_otu_table[,]))
# Top100 otus
OTUS_to_catch_from_otu_table <- colnames(t_otutable[,colSums(t_otutable>0)>(0.29*105)])
OTUS_to_catch_from_otu_table
# otus_raw_rel<-otus_raw_rel[,colSums(otus_raw_rel>0)>(0.05*142)]
dim(t_otutable)
rowSums(t_otutable)
#transform the otu table (square root) and determine the best method for calculating a distance matrix from it
sqrt_t_otus = sqrt(t_otutable)
#perform NMDS, define coordinates
set.seed(1234)
veganNMDS = metaMDS(sqrt_t_otus, distance = "bray", autotransform = TRUE)
library(gridExtra)
library(vegan)
library(tidyverse)
#perform NMDS, define coordinates
set.seed(1234)
veganNMDS = metaMDS(sqrt_t_otus, distance = "bray", autotransform = TRUE)
veganNMDS
MDS1 = veganNMDS$points[,1]
MDS2 = veganNMDS$points[,2]
# Ordering mapping file as MDS vectors
# match(x = rownames(mapping_file), table = names(MDS1)) check order
# ordering_map <- match(x = names(MDS1), table = rownames(mapping_file))
mapping_file <- mapping_file[rownames(mapping_file) %in% names(otu_table),]
mapping_file
# Mapping file
b = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/Samples_metadata.txt"
mapping_file = read.delim(file = b, header = F, stringsAsFactors = F)
# correct mapping file columns
rownames(mapping_file) = mapping_file[,1]
colnames(mapping_file) = c("Samp1", "Samp2", "Group", "Patient")
# Ordering mapping file as MDS vectors
# match(x = rownames(mapping_file), table = names(MDS1)) check order
# ordering_map <- match(x = names(MDS1), table = rownames(mapping_file))
mapping_file <- mapping_file[rownames(mapping_file) %in% names(otu_table),]
mapping_file
ordering_map <- match(x = names(MDS1), table = rownames(mapping_file))
#build a data frame with NMDS coordiates and metadata =  mapping file
NMDSvegan = data.frame(MDS1 = MDS1, MDS2 = MDS2, Group = mapping_file$Group[ordering_map])
#NMDSvegan = data.frame(MDS1 = MDS1, MDS2 = MDS2, Group = mapping2$Group2[ordering_map])
head(NMDSvegan)
ggplot(NMDSvegan, aes(x=MDS1, y=MDS2, colour = Group)) +
geom_point(size = 3) +
theme_bw()
otu_table
mapping_file$Group
mapping_file$Group %>%
dplyr::filter("A")
mapping_file$Group %>%
dplyr::filter("A")
mapping_file %>%
dplyr::filter(Group == "A")
mapping_file %>%
dplyr::filter(Group == "A") %>%
dplyr::select(rownames())
mapping_file %>%
dplyr::filter(Group == "A") %>%
dplyr::select(Samp1)
mapping_file %>%
dplyr::filter(Group == "A") %>%
dplyr::pull(Samp1)
mapping_file %>%
dplyr::filter(Group == "A") %>%
.rownames()
A_samples <- mapping_file %>%
dplyr::filter(Group == "A") %>%
dplyr::pull(Samp1)
B_samples <- mapping_file %>%
dplyr::filter(Group == "B") %>%
dplyr::pull(Samp1)
C_samples <- mapping_file %>%
dplyr::filter(Group == "C") %>%
dplyr::pull(Samp1)
library(beeswarm)
A_samples <- mapping_file %>%
dplyr::filter(Group == "A") %>%
dplyr::pull(Samp1)
B_samples <- mapping_file %>%
dplyr::filter(Group == "B") %>%
dplyr::pull(Samp1)
C_samples <- mapping_file %>%
dplyr::filter(Group == "C") %>%
dplyr::pull(Samp1)
otu_table[rownames(otu_table) %in% A_samples ]
otu_table[rownames(otu_table) %in% A_samples, ]
otu_table
otu_table[,rownames(otu_table) %in% A_samples]
otu_table[,colnames(otu_table) %in% A_samples]
colSums(otu_table[,colnames(otu_table) %in% A_samples])
colSums(otu_table[,colnames(otu_table) %in% A_samples])
colSums(otu_table[,colnames(otu_table) %in% B_samples])
colSums(otu_table[,colnames(otu_table) %in% C_samples])
sum(colSums(otu_table[,colnames(otu_table) %in% A_samples]))
sum(colSums(otu_table[,colnames(otu_table) %in% B_samples]))
sum(colSums(otu_table[,colnames(otu_table) %in% A_samples]))
sum(colSums(otu_table[,colnames(otu_table) %in% B_samples]))
sum(colSums(otu_table[,colnames(otu_table) %in% C_samples]))
beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% A_samples]))
beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% A_samples]))
beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% B_samples]))
beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% C_samples]))
A_counts <- beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% A_samples]))
B_counts <- beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% B_samples]))
C_counts <- beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% C_samples]))
grid.arrange(A_counts, B_counts, C_counts, ncol = 3)
grid.arrange(A_counts, B_counts, C_counts)
A_counts <- beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% A_samples]))
B_counts <- beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% B_samples]))
C_counts <- beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% C_samples]))
grid.arrange(A_counts, B_counts, C_counts)
par(mfrow=c(1,3)
par(mfrow=c(1,3))
A_counts
beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% A_samples]))
beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% B_samples]))
beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% C_samples]))
A_counts
A_counts$y
boxplot(A_counts$y, B_counts$y, C_counts$y)
par()
boxplot(A_counts$y, B_counts$y, C_counts$y)
dev.off
dev.off()
boxplot(A_counts$y, B_counts$y, C_counts$y)
### Permanova ###
set.seed(seed = 1234)
permanova <- adonis(sqrt_t_otus ~Group, data = NMDSvegan, permutations = 99, method = "bray")
permanova
ggplot(NMDSvegan, aes(x=MDS1, y=MDS2, colour = Group)) +
geom_point(size = 3) +
theme_bw()
A_counts
colSums(otu_table[,colnames(otu_table) %in% A_samples])
colSums(otu_table)
colnames(otu_table)
mapping_file[match(colnames(otu_table), rownames(mapping_file)),1]
data.frame(counts = colSums(otu_table),
groups = mapping_file[match(colnames(otu_table), rownames(mapping_file)),3])
data.frame(counts = colSums(otu_table),
groups = mapping_file[match(colnames(otu_table), rownames(mapping_file)),3],
patients = mapping_file[match(colnames(otu_table), rownames(mapping_file)),4])
counts_otu_table <- data.frame(counts = colSums(otu_table),
groups = mapping_file[match(colnames(otu_table), rownames(mapping_file)),3],
patients = mapping_file[match(colnames(otu_table), rownames(mapping_file)),4])
attach(counts_otu_table)
library(ExpDes)
rbd(treat = groups, block = patients, resp = counts, quali = TRUE, mcomp = "sk", sigT = 0.05, sigF = 0.05)
C_counts$y
boxplot(C_counts$y)
C_counts$y > 300
sum(C_counts$y > 300)
sum(C_counts$y < 300)
barplot(C_counts$y)
barplot(C_counts$y[order(C_counts$y)])
barplot(C_counts$y[order(C_counts$y)[-c(35,36)]])
barplot(C_counts$y[order(C_counts$y)[-c(34,35,36)]])
par(mfrow=c(1,3))
barplot(C_counts$y[order(C_counts$y)])
barplot(C_counts$y[order(C_counts$y)[-c(35,36)]])
barplot(C_counts$y[order(C_counts$y)[-c(34,35,36)]])
counts_otu_table
rbd(treat = groups, block = patients, resp = counts, quali = TRUE, mcomp = "sk", sigT = 0.05, sigF = 0.05)
#### Top3 from D:/projects/Jan_hrbacek/data/Runs_2021/statistics/barplots/Barplots_filter_by_3_most_abund.R file
a = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/barplots/top3_genera.tsv"
otu_table = read.delim(file = a, header = T, row.names = 1, stringsAsFactors = F)
otu_table
dim(a = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/OTU_table_noSingDoubPatMissingEuk.txt"
otu_table = read.delim(file = a, header = T, row.names = 1, stringsAsFactors = F))
dim(otu_table)
#### Top3 from D:/projects/Jan_hrbacek/data/Runs_2021/statistics/barplots/Barplots_filter_by_3_most_abund.R file
a = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/barplots/OTU_table_samples_top3_genera.tsv"
otu_table = read.delim(file = a, header = T, row.names = 1, stringsAsFactors = F)
dim(otu_table)
# Multiple otu_tables: Top3, Top10, raw and PIME
####  Pime otu_table
otu_table <- read.table(file = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/NMDS/PIME_otu_table_prevalence_70.tsv")
a = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/OTU_table_noSingDoubPatMissingEuk.txt"
otu_table = read.delim(file = a, header = T, row.names = 1, stringsAsFactors = F)
otu_table_pime <- read.delim(file = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/NMDS/PIME_otu_table_prevalence_70.tsv", header = T, row.names = 1, stringsAsFactors = F)
a = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/OTU_table_noSingDoubPatMissingEuk.txt"
otu_table = read.delim(file = a, header = T, row.names = 1, stringsAsFactors = F)
otu_table_pime <- read.delim(file = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/barplots/OTU_table_samples_top3_genera.tsv", header = T, row.names = 1, stringsAsFactors = F)
# Grab OTUs filtered by PIME
Important_OTUs <- rownames(otu_table_pime)
# Extract them from the RAW otu_table
otu_table <- otu_table[rownames(otu_table) %in% Important_OTUs,]
# Start digging how many counts each treatment has
colSums(otu_table)
# Extract them from the RAW otu_table
otu_table <- otu_table[rownames(otu_table) %in% Important_OTUs,]
Important_OTUs
otu_table_pime <- read.delim(file = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/NMDS/PIME_otu_table_prevalence_70.tsv", header = T, row.names = 1, stringsAsFactors = F)
# Grab OTUs filtered by PIME
Important_OTUs <- rownames(otu_table_pime)
Important_OTUs
# Extract them from the RAW otu_table
otu_table <- otu_table[rownames(otu_table) %in% Important_OTUs,]
a = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/OTU_table_noSingDoubPatMissingEuk.txt"
otu_table = read.delim(file = a, header = T, row.names = 1, stringsAsFactors = F)
# Extract them from the RAW otu_table
otu_table <- otu_table[rownames(otu_table) %in% Important_OTUs,]
# Start digging how many counts each treatment has
colSums(otu_table)
A_samples <- mapping_file %>%
dplyr::filter(Group == "A") %>%
dplyr::pull(Samp1)
B_samples <- mapping_file %>%
dplyr::filter(Group == "B") %>%
dplyr::pull(Samp1)
C_samples <- mapping_file %>%
dplyr::filter(Group == "C") %>%
dplyr::pull(Samp1)
sum(colSums(otu_table[,colnames(otu_table) %in% A_samples]))
sum(colSums(otu_table[,colnames(otu_table) %in% B_samples]))
sum(colSums(otu_table[,colnames(otu_table) %in% C_samples]))
A_counts <- beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% A_samples]))
B_counts <- beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% B_samples]))
C_counts <- beeswarm::beeswarm(colSums(otu_table[,colnames(otu_table) %in% C_samples]))
boxplot(C_counts$y)
C_counts$y > 300
sum(C_counts$y > 300)
sum(C_counts$y < 300)
par(mfrow=c(1,3))
barplot(C_counts$y[order(C_counts$y)])
barplot(C_counts$y[order(C_counts$y)[-c(35,36)]])
barplot(C_counts$y[order(C_counts$y)[-c(34,35,36)]])
boxplot(A_counts$y)
boxplot(B_counts$y)
boxplot(C_counts$y)
counts_otu_table <- data.frame(counts = colSums(otu_table),
groups = mapping_file[match(colnames(otu_table), rownames(mapping_file)),3],
patients = mapping_file[match(colnames(otu_table), rownames(mapping_file)),4])
write.table(x = counts_otu_table, file = "PIME_70%_prevalence_counts_from_noSingDoubPatientMissingEuk.txt", quote = F, sep = "\t", col.names = NA)
attach(counts_otu_table)
library(ExpDes)
rbd(treat = groups, block = patients, resp = counts, quali = TRUE, mcomp = "sk", sigT = 0.05, sigF = 0.05)
colnames(otu_table)
boxplot(A_counts$y, B_counts$y, C_counts$y)
dev.off()
boxplot(A_counts$y, B_counts$y, C_counts$y)
# Multiple otu_tables: Top3, Top10, raw and PIME
####  Pime otu_table
a = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/OTU_table_noSingDoubPatMissingEuk.txt"
otu_table = read.delim(file = a, header = T, row.names = 1, stringsAsFactors = F)
otu_table_pime <- read.delim(file = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/NMDS/PIME_otu_table_prevalence_70.tsv", header = T, row.names = 1, stringsAsFactors = F)
# Grab OTUs filtered by PIME
Important_OTUs <- rownames(otu_table_pime)
# Extract them from the RAW otu_table
otu_table <- otu_table[rownames(otu_table) %in% Important_OTUs,]
# Barplot OTU table after pime
otu_table_pime <- read.delim(file = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/NMDS/PIME_otu_table_prevalence_70.tsv", header = T, row.names = 1, stringsAsFactors = F)
otu_table_pime
## Mapping file
b = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/Samples_metadata.txt"
mapping_file = read.delim(file = b, header = F, stringsAsFactors = F)
# Barplot OTU table after pime
## OTU table
a = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/statistics/NMDS/PIME_otu_table_prevalence_70.tsv"
otu_table_pime <- read.delim(file = a, header = T, row.names = 1, stringsAsFactors = F)
## Mapping file
b = "C:/Users/Morais/Documents/daniel/Work/Runs_2021/Samples_metadata.txt"
mapping_file = read.delim(file = b, header = F, stringsAsFactors = F)
# correct mapping file columns
rownames(mapping_file) = mapping_file[,1]
colnames(mapping_file) = c("Samp1", "Samp2", "Group", "Patient")
rownames(mapping_file$Group == "A")
rownames(mapping_file$Group) == "A"
mapping_file$Group == "A"
mapping_file[mapping_file$Group == "A",]
rownames(mapping_file[mapping_file$Group == "A",])
otu_table_pime[,colnames(otu_table_pime) %in% rownames(mapping_file[mapping_file$Group == "A",])]
## Averages table
OTU_A_treat <- otu_table_pime[,colnames(otu_table_pime) %in% rownames(mapping_file[mapping_file$Group == "A",])]
dim(OTU_A_treat)
OTU_B_treat <- otu_table_pime[,colnames(otu_table_pime) %in% rownames(mapping_file[mapping_file$Group == "B",])]
OTU_C_treat <- otu_table_pime[,colnames(otu_table_pime) %in% rownames(mapping_file[mapping_file$Group == "C",])]
rowSums(OTU_A_treat)
colSums(OTU_A_treat)
sum(colSums(OTU_A_treat))
sum(colSums(OTU_B_treat))
sum(colSums(OTU_C_treat))
colSums(OTU_A_treat)
rowSums(OTU_A_treat)
colSums(OTU_B_treat)
colSums(OTU_C_treat)
?merge
?concat
as.Date("2020/2/28")
as.Date("2020/2/28") - as.Date("2020/3/1")
<- data.frame(A1 = c(2,3), A2 = c(4,8))
D1 <- data.frame(A1 = c(2,3), A2 = c(4,8))
data2 <- data.frame(A1 = c(6,9), B4 = c(6,6))
merge(D1,data2)
merge(D1,data2, by = "A1")
D1
data2
data2 <- data.frame(A1 = c(6,3), B4 = c(6,6))
merge(D1,data2, by = "A1")
D1
data2
#Abrir o R pelo terminar e digitar:
pavian::runApp(port=5000, maxUploadSize=500*1024^2)
500*1024^2
#Abrir o R pelo terminar e digitar:
pavian::runApp(port=5000, maxUploadSize=900*1024^2)
#Abrir o R pelo terminar e digitar:
pavian::runApp(port=5000, maxUploadSize=900*1024^2)
shiny::runGitHub("fbreitwieser/pavian", subdir = "inst/shinyapp")
shiny::runGitHub("fbreitwieser/pavian", subdir = "inst/shinyapp")
#Abrir o R pelo terminar e digitar:
pavian::runApp(port=5000, maxUploadSize=900*1024^2)
install.packages("cli")
install.packages("cli")
remove.packages("cli")
remove.packages("cli")
install.packages("cli")
install.packages("cli")
old.packages()
update.packages()
update.packages(ask = FALSE)
.libPaths()
update.packages(ask = FALSE)
update.packages(ask = FALSE)
devtools::install_github("ipeaGIT/geobr", subdir = "r-package")
detach("package:cli", unload = TRUE)
update.packages(ask = FALSE)
update.packages(ask = FALSE)
final.table <- read_delim('../../../microbiome_br_2/MG_FEDERICA_TABLE_FINAL.tab')
library(tidyverse)
library(tidyverse)
final.table <- read_delim('../../../microbiome_br_2/MG_FEDERICA_TABLE_FINAL.tab')
getwd()
setwd(dir = "G:/My Drive/federica/soil_fundamental_genomic_traits/scripts/prague/")
final.table <- read_delim('../../../microbiome_br_2/MG_FEDERICA_TABLE_FINAL.tab')
# "\\[|\\]" regex removes any instance of '[' or ']'
table.clean <- final.table %>%
mutate(BEST_TAX = str_replace_all(BEST_TAX, "\\[|\\]","")) %>%
rename('taxonomy' = 'BEST_TAX') %>%
separate(col = taxonomy, into = c("Genus", "species"), sep = " ", remove = F) %>%
unite("taxonomy_short",Genus:species, sep = " ", remove = F) %>%
clean_names()
folder_path <- "../../../microbiome_br_2/"
write.table(x = table.clean, file = paste0(folder_path, "FINAL_TABLE_CLEAN_MG_FEDERICA.txt"), quote = F, sep = "\t", row.names = F)
# "\\[|\\]" regex removes any instance of '[' or ']'
table.clean <- final.table %>%
mutate(BEST_TAX = str_replace_all(BEST_TAX, "\\[|\\]","")) %>%
rename('taxonomy' = 'BEST_TAX') %>%
separate(col = taxonomy, into = c("Genus", "species"), sep = " ", remove = F) %>%
unite("taxonomy_short",Genus:species, sep = " ", remove = F) %>%
clean_names()
library(janitor)
# "\\[|\\]" regex removes any instance of '[' or ']'
table.clean <- final.table %>%
mutate(BEST_TAX = str_replace_all(BEST_TAX, "\\[|\\]","")) %>%
rename('taxonomy' = 'BEST_TAX') %>%
separate(col = taxonomy, into = c("Genus", "species"), sep = " ", remove = F) %>%
unite("taxonomy_short",Genus:species, sep = " ", remove = F) %>%
clean_names()
table.clean[c(2,4,5,7),c(1:5)]
final.table[c(2,4,5,7),c(1:5)]
final.table[c(1:7),c(1:5)]
clean.table[c(1:7),c(1:5)]
table.clean[c(1:7),c(1:5)]
table.clean[c(1:7),c(15:20)]
write.table(x = table.clean, file = paste0(folder_path, "FINAL_TABLE_CLEAN_MG_FEDERICA.txt"), quote = F, sep = "\t", row.names = F)
names(final.table)
matched_Federica_table_to_full_dataset <- match(table.clean$taxonomy, full_dataset$Taxonomy)
matched_Federica_table_to_full_dataset_tax_long <- match(table.clean$taxonomy, full_dataset_tax_long$Taxonomy)
