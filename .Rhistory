getwd()
dir()
setwd(dir = "../soil_fundamental_genomic_traits/scripts/")
setwd(dir = "..")
getwd()
## The function
source(file = "alternative_function.R")
dir()
# load the packages
# main packs to start with
pcks <- c( "tidyverse", "janitor")
if(sum(as.numeric(!pcks %in% installed.packages())) != 0){
installation <- pcks[!pcks %in% installed.packages()]
for(i in 1:length(installation)) {
install.packages(installation, dependencies = T)
break()}
suppressPackageStartupMessages(
sapply(pcks,require,character.only = T)
)
} else {
suppressPackageStartupMessages(
sapply(pcks,require,character.only = T)
)
}
rm(pcks)
# get working directory and paste directory to save outputs
# in the Knit dropdown menu, select Knit directory, then Current Working Directory.
# dir.create("~/R/microbiome_br/scripts")
# dir.create("~/R/microbiome_br/outputs")
# dir.create("~/R/microbiome_br/data")
work_dir <- getwd()
# check the working directory
paste("Working in directory:", getwd())
euk <- read_delim('../../../microbiome_br_2/eukaryotes.txt')
getwd()
euk <- read_delim('../microbiome_br_2/eukaryotes.txt')
euk.clean <- euk %>%
mutate(`#Organism/Name` = str_replace_all(`#Organism/Name`, "\\[|\\]","")) %>%
mutate(Organism = `#Organism/Name`, .after = `#Organism/Name`) %>%
janitor::clean_names(.)
# take a look in the data
euk.clean %>% filter(if_any(everything(), ~str_detect(., "Candida albicans"))) %>% pull(status, organism)
euk <- read_delim('../microbiome_br_2/prokaryotes.txt')
# eukaryotic table
euk <- read_delim('eukaryotes.txt')
euk <- read_delim('../microbiome_br_2/eukaryotes.txt')
prok <- read_delim('../microbiome_br_2/prokaryotes.txt')
prok.clean <- prok %>%
mutate(`#Organism/Name` = str_replace_all(`#Organism/Name`, "\\[|\\]","")) %>%
mutate(Organism = `#Organism/Name`, .after = `#Organism/Name`) %>%
janitor::clean_names(.)
# lets take a look in the databases
prok.clean %>% filter(if_any(everything(), ~str_detect(., "Koribacter versatilis Ellin345"))) %>%
filter(if_any(status, ~str_detect(., "Complete")))
# table final
final.table <- read_delim('MG_FEDERICA_TABLE_FINAL.tab')
final.table <- read_delim('../microbiome_br_2/MG_FEDERICA_TABLE_FINAL.tab')
# it removes any instance of '[' or ']'
table.clean <- final.table %>%
mutate(BEST_TAX = str_replace_all(BEST_TAX, "\\[|\\]","")) %>%
rename('number_organism_name' = 'BEST_TAX') %>%
mutate(organism = number_organism_name, .after = number_organism_name) %>%
clean_names()
table.clean %>% select(number_organism_name) %>% filter(if_any(everything(), ~str_detect(., "Candidatus")))
table.clean %>% distinct(number_organism_name)
# get the taxonomies freom Federica table
taxonomies_federica <- table.clean %>% filter(number_organism_name != "-") %>% pull(number_organism_name) %>% as.factor() %>% levels()
rm(euk,prok)
folder_path
dir(../)
dir("../")
#folder_path <- "~/R/microbiome_br/outputs/prague/"
folder_path <- "../microbiome_br_2/"
folder_path
## read hits found. Avoid running all steps again.
# best_tax_prok <- read_delim(file = paste0(folder_path, "/federica_found_taxonomy_prok.txt"))
best_tax_prok <- read_delim(file = paste0(folder_path, "federica_found_taxonomy_prok.txt"))
which(best_tax_prok$number_organism_name != best_tax_prok$taxonomy)
best_tax_prok[which(best_tax_prok$number_organism_name != best_tax_prok$taxonomy), c(1,6)]
waldo::compare(best_tax_prok$number_organism_name, best_tax_prok$taxonomy)
best_tax_euk <- read_delim(file = paste0(folder_path, "federica_found_taxonomy_euk.txt"))
rm(list=setdiff(ls(), c("taxonomies_federica", "best_tax_prok", "best_tax_euk", 'table.clean')))
# status
best_tax_prok %>% distinct(status)
number_of_entries <- best_tax_prok %>% count(taxonomy, sort = T )
number_of_entries
number_of_entries[order(number_of_entries$n,decreasing = T),]
number_of_entries_prok <- best_tax_prok %>% count(taxonomy, sort = T )
number_of_entries_prok
## The function
source(file = "scripts/alternative_function_prok.R")
dir()
dir()
dir(path = "scripts")
dir(path = "scripts/prague")
## The function
source(file = "scripts/prague/alternative_function_prok.R")
## Testing function
taxa = "Acetobacter pasteurianus IFO 3283-01"
genomic_traits_prok(taxa, best_tax_prok)
genomic_traits(taxa)
genomic_traits_prok(taxa)
c(genomic_traits_prok(taxa))
as.data.frame(c(genomic_traits_prok(taxa)))
genomic_traits_prok(taxa)
number_of_entries %>%
slice_head(n = 64) %>%
pull(taxonomy)
# check on the larger ones from the table
larger_ones_prok <- number_of_entries %>%
slice_head(n = 64) %>%
pull(taxonomy)
larger_ones_prok
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., ~genomic_traits(., best_tax_prok))
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., ~genomic_traits_prok(., best_tax_prok))
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., ~genomic_traits_prok(., best_tax_prok$taxonomy))
larger_ones_prok
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., ~genomic_traits_prok())
prok_taxonomy_search_using_purrr
larger_ones_prok
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., ~genomic_traits_prok(.,))
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., genomic_traits_prok())
genomic_traits_prok(taxa)
number_of_entries
larger_ones_prok
?map_df
map_df(larger_ones_prok, genomic_traits_prok)
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., ~genomic_traits_prok(., best_tax_prok))
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., ~genomic_traits_prok)
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., genomic_traits_prok)
highest_assembly_level
prok_taxonomy_search_using_purrr %>% count(highest_assembly_level)
prok_taxonomy_search_using_purrr
# Testing function
genomic_traits("Aaosphaeria arxii", best_tax_euk)
best_tax_prok
genomic_traits(taxa, best_tax_prok)
## The function
source(file = "scripts/prague/alternative_function.R")
genomic_traits(taxa, best_tax_prok)
## Testing function
taxa = "Acetobacter pasteurianus IFO 3283-01"
genomic_traits(taxa, best_tax_prok)
# check on the larger ones from the table
larger_ones_prok <- number_of_entries %>%
slice_head(n = 64) %>%
pull(taxonomy)
dim(number_of_entries)
larger_ones_prok
number_of_entries
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., genomic_traits)
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., genomic_traits, best_tax_prok)
prok_taxonomy_search_using_purrr %>% count(highest_assembly_level)
# Testing function
genomic_traits("Aaosphaeria arxii", best_tax_euk)
# check on the larger ones from the table
larger_ones_euk <- number_of_entries %>%
slice_head(n = 64) %>%
pull(taxonomy)
euk_taxonomy_search_using_purrr <- larger_ones_euk %>% map_df(., ~genomic_traits(., best_tax_euk))
euk_taxonomy_search_using_purrr %>% count(highest_assembly_level)
larger_ones_euk
larger_ones_euk
# check on the larger ones from the table
larger_ones_euk <- number_of_entries_euk %>%
slice_head(n = 64) %>%
pull(taxonomy)
larger_ones_euk
pull(taxonomy)
number_of_entries_euk
number_of_entries_euk <- best_tax_euk %>% count(taxonomy, sort = T )
number_of_entries_prok <- best_tax_prok %>% count(taxonomy, sort = T )
number_of_entries_prok <- best_tax_prok %>% count(taxonomy, sort = T )
number_of_entries_prok
# check on the larger ones from the table
larger_ones_prok <- number_of_entries_prok %>%
slice_head(n = 64) %>%
pull(taxonomy)
prok_taxonomy_search_using_purrr <- larger_ones_prok %>% map_df(., genomic_traits, best_tax_prok)
prok_taxonomy_search_using_purrr %>% count(highest_assembly_level)
number_of_entries_euk
# Testing function
genomic_traits("Aaosphaeria arxii", best_tax_euk)
# check on the larger ones from the table
larger_ones_euk <- number_of_entries_euk %>%
slice_head(n = 64) %>%
pull(taxonomy)
larger_ones_euk
euk_taxonomy_search_using_purrr <- larger_ones_euk %>% map_df(., ~genomic_traits(., best_tax_euk))
euk_taxonomy_search_using_purrr %>% count(highest_assembly_level)
# only prokaryotes
full_dataset_prok <- table.clean %>%
filter(organism %in% best_tax_prok$taxonomy) %>%
bind_cols(map_df(.$organism, ~genomic_traits(., best_tax_prok)))
full_dataset_prok
number_of_entries_prok
full_dataset_prok <- number_of_entries_prok$taxonomy %>% map_df(., genomic_traits, best_tax_prok)
